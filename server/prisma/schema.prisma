generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                Int       @id @default(autoincrement())
  rollNumber        String    @unique @db.VarChar(20)
  fullName          String    @db.VarChar(100)
  photoUrl          String?   @db.VarChar(500)
  fatherName        String?   @db.VarChar(100)
  email             String    @unique @db.VarChar(100)
  username          String    @unique @db.VarChar(50)
  password          String    @db.VarChar(255)
  studentMobile     String?   @db.VarChar(15)
  parentMobile      String?   @db.VarChar(15)
  occupation        String?   @db.VarChar(50)
  dob               DateTime?
  collegeName       String?   @db.VarChar(100)
  bloodGroup        String?   @db.VarChar(5)
  gender            String?   @db.VarChar(10)
  qualification     String?   @db.VarChar(50)
  permanentAddress  Json?
  localAddress      Json?
  isVerified        Boolean   @default(false)
  verificationToken String?   @db.VarChar(255)
  enrollments       Enrollment[]
  transactions      Transaction[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("students")
}

model Admin {
  id        Int      @id @default(autoincrement())
  fullName  String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  username  String   @unique @db.VarChar(50)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Course {
  id           Int            @id @default(autoincrement())
  title        String         @db.VarChar(200)
  description  String?
  duration     Int
  startDate    DateTime?
  feePerMonth  Float
  qrCodeUrl    String?        @db.VarChar(500)
  status       String         @default("upcoming") // upcoming, live, completed
  enrollments  Enrollment[]
  transactions Transaction[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("courses")
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
  enrolledAt DateTime @default(now())

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Transaction {
  tid             Int       @id @default(autoincrement())
  billNo          String    @unique @db.VarChar(50)
  student         Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       Int
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId        Int
  months          Int
  amount          Float
  discount        Float     @default(0)
  netPayable      Float
  modeOfPayment   String    @db.VarChar(20) // online, offline
  paymentProofUrl String?   @db.VarChar(500)
  status          String    @default("pending approval") // pending approval, paid, rejected
  createdAt       DateTime  @default(now())

  @@map("transactions")
}

model Session {
  sid        String   @id
  sess       Json
  expiresAt  DateTime

  @@map("session")
  @@index([expiresAt])
}